/* File: regfile.v
 * Description: Register File implemenation for FMAT's Processor  
 * Authors: Angela To, Frank Mezatessta
 * Date: 2/6/15
 */
 
 // NOTE: I have not tried to compile/test this code in quartus yet, everything is still speculative

`timescale 1ns / 1ps 

module regfile () (
	input clk,				// Clock
	// How big should these register be? I just set everything to be 8 bits by default ...
	input [7:0] wen_i,			// control, write enable signal indicates whether data can be written
	input [7:0] regRead1_i, 		// READ_Register #1 (address) to be READ
	input [7:0] regRead2_i, 		// READ_Register #2 (address)to be READ
	input [7:0] regWrite_i,			// WRITE_Register (address) to WRITE to
	input [7:0] dataWrite_i,		// Data to WRITE into Write_Register
	output [7:0] dataRead1_o,		// Data #1, First value read from the register file
	output [7:0] dataRead2_o		// Data #2, Second value read from the register file
);

// Register Parameters
parameter DATA_WIDTH = 8;				// 8 Bits
parameter REGISTER_FILE_WIDTH = 16;			// 16 Registers
// The Register File
reg [DATA_WIDTH-1:0] register[REGISTER_FILE_WIDTH-1:0]; // 16 8-Bit Registers in use (8 GPR)

// ... not sure ....
assign dataRead1_o = register[regRead1_i];
assign dataRead2_o = register[regRead2_i];

//always@(*) begin
always@(posedge clk) begin				// Write data on positive clock edge
	if (wen_i) begin				// If we are allowed to write, write the data value to 
		register[regWrite_i] <= dataWrite_i;	// the specified register in the register file 
	end
	// ... ? 
end

endmodule 
